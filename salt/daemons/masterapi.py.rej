***************
*** 570,621 ****
                      if isinstance(self.opts['mine_get'][match], list):
                          perms.update(self.opts['mine_get'][match])
  
              for fun in functions:
                  if any(re.match(perm, fun) for perm in perms):
-                     functions_allowed.append(fun)
- 
-             if not len(functions_allowed):
                  return {}
-         else:
-             functions_allowed = functions
  
          ret = {}
          if not salt.utils.verify.valid_id(self.opts, load['id']):
              return ret
-         expr_form = load.get('expr_form')
-         if expr_form is not None and 'tgt_type' not in load:
-             salt.utils.versions.warn_until(
-                 'Neon',
-                 '_mine_get: minion {0} uses pre-Nitrogen API key '
-                 '"expr_form". Accepting for backwards compatibility '
-                 'but this is not guaranteed '
-                 'after the Neon release'.format(load['id'])
-             )
-             match_type = expr_form
-         else:
-             match_type = load.get('tgt_type', 'glob')
          if match_type.lower() == 'pillar':
              match_type = 'pillar_exact'
          if match_type.lower() == 'compound':
              match_type = 'compound_pillar_exact'
          checker = salt.utils.minions.CkMinions(self.opts)
-         _res = checker.check_minions(
                  load['tgt'],
                  match_type,
                  greedy=False
                  )
-         minions = _res['minions']
          for minion in minions:
              fdata = self.cache.fetch('minions/{0}'.format(minion), 'mine')
  
              if not isinstance(fdata, dict):
                  continue
  
-             if not _ret_dict and functions_allowed and functions_allowed[0] in fdata:
-                 ret[minion] = fdata.get(functions_allowed[0])
              elif _ret_dict:
-                 for fun in list(set(functions_allowed) & set(fdata.keys())):
-                     ret.setdefault(fun,{})[minion] = fdata.get(fun)
  
          return ret
  
--- 590,630 ----
                      if isinstance(self.opts['mine_get'][match], list):
                          perms.update(self.opts['mine_get'][match])
  
+             _fun = []
              for fun in functions:
                  if any(re.match(perm, fun) for perm in perms):
+                     _fun.append(fun)
+             if not len(_fun):
                  return {}
+             else:
+                 functions_allowed = _fun
  
          ret = {}
          if not salt.utils.verify.valid_id(self.opts, load['id']):
              return ret
+         match_type = load.get('expr_form', 'glob')
          if match_type.lower() == 'pillar':
              match_type = 'pillar_exact'
          if match_type.lower() == 'compound':
              match_type = 'compound_pillar_exact'
          checker = salt.utils.minions.CkMinions(self.opts)
+         minions = checker.check_minions(
                  load['tgt'],
                  match_type,
                  greedy=False
                  )
          for minion in minions:
              fdata = self.cache.fetch('minions/{0}'.format(minion), 'mine')
  
              if not isinstance(fdata, dict):
                  continue
  
+             if not _ret_dict and functions_allowed[0] in fdata:
+                 ret[minion] = fdata.get(fun)
              elif _ret_dict:
+                 for fun in functions_allowed:
+                     if fun in fdata:
+                         ret.setdefault(fun, {})[minion] = fdata.get(fun)
  
          return ret
  
